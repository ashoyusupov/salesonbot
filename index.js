const TelegramBot  = require('node-telegram-bot-api')
const config = require('./config/config')
const { sequelize } = require('./models')
const TgController = require('./controllers/TgController')

const TOKEN = config.salesonbot.token

const bot = new TelegramBot(TOKEN,{
	webHook: {
		port: config.salesonbot.port,
		autoOpen: false
	}
})

const sessTg = {}
const saveDone = '–ó–∞–ø—Ä–æ—Å –°–æ–∑–¥–∞–Ω'
const welcomeMessage = '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Salesonbot!</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\nüëá'
const library = {
	'startMessage': {
		'ru': '–ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ –º–µ—á—Ç–µ! –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Å –Ω–∞–º–∏!',
		'uz': 'Omadingiz biz bilan keladi! Pul topishni boshlang!',
	},
	'startButton': {
		'ru': 'üíµ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å',
		'uz': 'üíµ Pul topish',
	},
	'cooperation': {
		'ru': 'üë®‚ÄçüíªÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ',
		'uz': 'üë®‚ÄçüíªÔ∏è Hamkorlik',		
	},
	'mydata': {
		'ru': '‚ÑπÔ∏è –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ',
		'uz': '‚ÑπÔ∏è Ma\'lumotim',		
	}
}

const formHeader = '<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –Ω–∏–∂–µ\n–ñ–∏—Ä–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\nüëá\n\n'
const formFields = {
	'tovarimya': {
		'langRU': '–ò–º—è –∏ –§–∞–º–∏–ª–∏—è –∫–ª–∏–µ–Ω—Ç–∞',
		'smile': 'üìù',
		'inputMess': '<b>–í–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—è –∫–ª–∏–µ–Ω—Ç–∞:</b>\nüëá'
	},
}
const settFields = {
	'settingimya': {
		'langRU': '–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û',
		'smile': 'üìù',
		'inputMess': '<b>–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û:</b>\nüëá'
	},
	'settingregion': {
		'langRU': '–í–∞—à –ì–æ—Ä–æ–¥',
		'smile': 'üèôÔ∏è',
		'inputMess': '<b>–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ì–æ—Ä–æ–¥:</b>\nüëá'
	},
	'instruction': {
		'langRU': '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?',
		'smile': 'üìú',
		'inputMess': '<b>–°–∫–æ—Ä–æ</b>'
	},
	'feedback': {
		'langRU': '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤',
		'smile': '‚úçÔ∏è',
		'inputMess': '<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:</b>\nüëá'
	},
}

const zakaztips = Object.keys(formFields)
const settTips = Object.keys(settFields)

const tipGruza = [
	'–ê–≤—Ç–æ, –º–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞','–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞','–ñ–î –ø–µ—Ä–µ–≤–æ–∑–∫–∏',
	'–ó–∞–ø—á–∞—Å—Ç–∏','–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏','–õ–∏—á–Ω—ã–µ –≤–µ—â–∏','–ú–µ–±–µ–ª—å','–ú–µ—Ç–∞–ª–ª','–ù–∞–ª–∏–≤–Ω–æ–π –≥—Ä—É–∑',
	'–ù–µ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã–µ –≥—Ä—É–∑—ã','–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ','–û–ø–∞—Å–Ω—ã–µ –≥—Ä—É–∑—ã','–ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏',
	'–ü–µ—Ä–µ–≤–æ–∑–∫–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö','–ü–µ—Ä–µ–µ–∑–¥','–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª','–ü–æ–ø—É—Ç–Ω—ã–π –≥—Ä—É–∑','–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
	'–ü—Ä–æ—á–∏–µ –≥—Ä—É–∑—ã','–°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã','–°—ã–ø—É—á–∏–π –≥—Ä—É–∑'
]

/*const regions = [
	'–ë–µ—Ä—É–Ω–∏',	'–ë—É—Å—Ç–∞–Ω',	'–ö—É–Ω–≥—Ä–∞–¥',	'–ú–∞–Ω–≥–∏—Ç',	'–ú—É–π–Ω–∞–∫',	'–ù—É–∫—É—Å',	'–¢–∞—Ö–∏–∞—Ç–∞—à',	'–¢—É—Ä—Ç–∫—É–ª—å',	'–•–∞–ª–∫–∞–±–∞–¥',	'–•–æ–¥–∂–µ–π–ª–∏',	'–ß–∏–º–±–∞–π',	'–®—É–º–∞–Ω–∞–π',	'–ê–Ω–¥–∏–∂–∞–Ω',	'–ê—Å–∞–∫–∞',	'–î–∂–∞–ª–∞–∫—É–¥—É–∫',	'–ö–∞—Ä–∞—Å—É',	'–ö—É—Ä–≥–∞–Ω—Ç–µ–ø–∞',	'–ú–∞—Ä—Ö–∞–º–∞—Ç',	'–ü–∞–π—Ç—É–≥',	'–ü–∞—Ö—Ç–∞–∞–±–∞–¥',	'–•–∞–Ω–∞–±–∞–¥',	'–•–æ–¥–∂–∞–∞–±–∞–¥',	'–®–∞—Ö—Ä–∏—Ö–∞–Ω',	'–ê–ª–∞—Ç',	'–ë—É—Ö–∞—Ä–∞',	'–í–∞–±–∫–µ–Ω—Ç',	'–ì–∞–∑–ª–∏',	'–ì–∞–ª–∞–∞—Å–∏—è',	'–ì–∏–∂–¥—É–≤–∞–Ω',	'–ö–∞–≥–∞–Ω',	'–ö–∞—Ä–∞–∫—É–ª—å',	'–ö–∞—Ä–∞—É–ª–±–∞–∑–∞—Ä',	'–†–æ–º–∏—Ç–∞–Ω',	'–®–∞—Ñ–∏—Ä–∫–∞–Ω',	'–ì–∞–≥–∞—Ä–∏–Ω',	'–ì–∞–ª–ª—è–∞—Ä–∞–ª',	'–î–∞—à—Ç–∞–±–∞–¥',	'–î–∂–∏–∑–∞–∫',	'–î—É—Å—Ç–ª–∏–∫',	'–ü–∞—Ö—Ç–∞–∫–æ—Ä',	'–ë–µ—à–∫–µ–Ω—Ç',	'–ì—É–∑–∞—Ä',	'–ö–∞–º–∞—à–∏',	'–ö–∞—Ä—à–∏',	'–ö–∞—Å–∞–Ω',	'–ö–∏—Ç–∞–±',	'–ú—É–±–∞—Ä–µ–∫',	'–¢–∞–ª–∏–º–∞—Ä–¥–∂–∞–Ω',	'–ß–∏—Ä–∞–∫—á–∏',	'–®–∞—Ö—Ä–∏—Å–∞–±–∑',	'–Ø–∫–∫–∞–±–∞–≥',	'–Ø–Ω–≥–∏-–ù–∏—à–∞–Ω',	'–ó–∞—Ä–∞—Ñ—à–∞–Ω',	'–ö—ã–∑—ã–ª—Ç–µ–ø–∞',	'–ù–∞–≤–æ–∏',	'–ù—É—Ä–∞—Ç–∞',	'–£—á–∫—É–¥—É–∫',	'–Ø–Ω–≥–∏—Ä–∞–±–∞–¥',	'–ö–∞—Å–∞–Ω—Å–∞–π',	'–ù–∞–º–∞–Ω–≥–∞–Ω',	'–ü–∞–ø',	'–¢—É—Ä–∞–∫—É—Ä–≥–∞–Ω',	'–£—á–∫—É—Ä–≥–∞–Ω',	'–•–∞–∫–∫—É–ª–∞–±–∞–¥',	'–ß–∞—Ä—Ç–∞–∫',	'–ß—É—Å—Ç',	'–ê–∫—Ç–∞—à',	'–ë—É–ª—É–Ω–≥—É—Ä',	'–î–∂–∞–º–±–∞–π',	'–î–∂—É–º–∞',	'–ò—à—Ç—ã—Ö–∞–Ω',	'–ö–∞—Ç—Ç–∞–∫—É—Ä–≥–∞–Ω',	'–ù—É—Ä–∞–±–∞–¥',	'–ü–∞–π–∞—Ä—ã–∫',	'–°–∞–º–∞—Ä–∫–∞–Ω–¥',	'–£—Ä–≥—É—Ç',	'–ß–µ–ª–µ–∫',	'–ë–∞–π—Å—É–Ω',	'–î–µ–Ω–∞—É',	'–î–∂–∞—Ä–∫—É—Ä–≥–∞–Ω',	'–ö—É–º–∫—É—Ä–≥–∞–Ω',	'–¢–µ—Ä–º–µ–∑',	'–®–∞—Ä–≥—É–Ω—å',	'–®–µ—Ä–∞–±–∞–¥',	'–®—É—Ä—á–∏',	'–ë–∞—Ö—Ç',	'–ì—É–ª–∏—Å—Ç–∞–Ω',	'–°—ã—Ä–¥–∞—Ä—å—è',	'–®–∏—Ä–∏–Ω',	'–Ø–Ω–≥–∏–µ—Ä',	'–ê–∫–∫—É—Ä–≥–∞–Ω',	'–ê–ª–º–∞–ª—ã–∫',	'–ê–Ω–≥—Ä–µ–Ω',	'–ê—Ö–∞–Ω–≥–∞—Ä–∞–Ω',	'–ë–µ–∫–∞–±–∞–¥',	'–ë—É–∫–∞',	'–ì–∞–∑–∞–ª–∫–µ–Ω—Ç',	'–î—É—Å—Ç–∞–±–∞–¥',	'–ö–µ–ª–µ—Å',	'–ù—É—Ä–∞—Ñ—à–æ–Ω',	'–ü–∞—Ä–∫–µ–Ω—Ç',	'–ü—Å–∫–µ–Ω—Ç',	'–ß–∏–Ω–∞–∑',	'–ß–∏—Ä—á–∏–∫',	'–Ø–Ω–≥–∏–∞–±–∞–¥',	'–Ø–Ω–≥–∏—é–ª—å',	'–ë–µ—à–∞—Ä—ã–∫',	'–ö–æ–∫–∞–Ω–¥',	'–ö—É–≤–∞',	'–ö—É–≤–∞—Å–∞–π',	'–ú–∞—Ä–≥–∏–ª–∞–Ω',	'–†–∏—à—Ç–∞–Ω',	'–¢–∏–Ω—á–ª–∏–∫',	'–§–µ—Ä–≥–∞–Ω–∞',	'–Ø–π–ø–∞–Ω',	'–ü–∏—Ç–Ω–∞–∫',	'–£—Ä–≥–µ–Ω—á',	'–•–∏–≤–∞',	'–¢–∞—à–∫–µ–Ω—Ç'
]*/

const array_mainmenu = [
	[
		{
			text: 'üá∫üáø O\'zbekcha',
			callback_data: 'lang_uz'
		}
	],
	[
		{
			text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
			callback_data: 'lang_ru'
		}
	]
]

const array_mainmenu_approved = [
	[
		{
			text: 'üõí –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞',
			callback_data: 'zakaz'
		}
	],
	[
		{
			text: '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
			callback_data: 'settings'
		}
	]
]

function buttonGen(formFields, tips, stype) {
	let buttonlist = []

	for (let i=0; i < tips.length; i+=2) {

		let subsitelist = []

		if (i % 2 === 0) {
			if (tips.hasOwnProperty(i)) {
				subsitelist.push({
					text: formFields[tips[i]]['smile']+' '+ formFields[tips[i]]['langRU'],
					callback_data: tips[i]
				})
			}
			if (tips.hasOwnProperty(i+1)) {
				subsitelist.push({
					text: formFields[tips[i+1]]['smile']+' '+ formFields[tips[i+1]]['langRU'],
					callback_data: tips[i+1]
				})
			}
		} else {
			subsitelist.push({
				text: formFields[tips[i+1]]['smile']+' '+ formFields[tips[i+1]]['langRU'],
				callback_data: tips[i+1]
			})
		}

		buttonlist.push(subsitelist)
	}
	if (stype!='setting') {
		if (tips.length>1) {
			buttonlist.push([{text: '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', callback_data: 'sozdatzakaz'}])
		}		
	}
	
	buttonlist.push([{text: '‚óÄ –ù–∞–∑–∞–¥', callback_data: 'main'}])

	return buttonlist
}

const zakazMessage = (chat_id, sessionTg) => {
	return new Promise(function(resolve) {

		let temptext = formHeader
		for (let index in zakaztips) {			
			temptext += (typeof sessionTg[chat_id]['zakazData'][zakaztips[index]] === 'undefined' ? 'üõë' : '‚úÖ' ) + 
			' <b>' + formFields[zakaztips[index]]['langRU'] + '</b>: <i>' + 
			(typeof sessionTg[chat_id]['zakazData'][zakaztips[index]] === 'undefined' ? ' –Ω–µ—Ç –∏–Ω—Ñ–æ' : 
				(zakaztips[index]=='tovartip' ? tipGruza[sessionTg[chat_id]['zakazData'][zakaztips[index]]] : sessionTg[chat_id]['zakazData'][zakaztips[index]])) + '</i>\n'

			console.log(zakaztips[index])
		}
		

		resolve(temptext)

	})
}
const updateData = (chat_id, input, column) => {
	return new Promise(function(resolve) {
		
		let resultmessage = {}

		TgController.updateUser(chat_id, column, input).then( result => {
			console.log(result)
			if (result.length > 0) {
				resultmessage.check = true
				resultmessage.text = '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
			} else {
				resultmessage.check = false
				resultmessage.text = '–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
			}
			resolve(resultmessage)
		})

	})
}
const checkZakaz = (chat_id, query_id, sessionTg) => {
	return new Promise(function(resolve) {

		let temptext = '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å:\n'
		let ctn = 0
		for (let index in zakaztips) {
			if (typeof sessionTg[chat_id]['zakazData'][zakaztips[index]] === 'undefined') {
				temptext += '‚ö†Ô∏è ' + formFields[zakaztips[index]]['langRU'] + '\n'
				ctn += 1
			}
		}
		
		let resultmessage = {}
		
		if (ctn>0) {
			resultmessage.check = false
			resultmessage.text = temptext
		} else {
			resultmessage.check = true
			resultmessage.text = saveDone
		}
		resolve(resultmessage)

	})
}

sequelize.sync({ force: false })
	.then(() => {
		console.log(`Server started on port ${config.salesonbot.port}`)
	})

bot.openWebHook()
bot.setWebHook(`${config.salesonbot.url}/bot${TOKEN}`)

let zakazMenu = buttonGen(formFields, zakaztips, 'zakaz')

bot.on('message', msg =>{
	console.log(msg)	
	
	if(!sessTg.hasOwnProperty(msg.chat.id)){
		sessTg[msg.chat.id] = {
			id: msg.chat.id
		}
	}
	console.log(sessTg)
	
	if (msg.chat.id>0 ) {
			
		if (msg.text=='/start') {

			TgController.checkUser(msg.chat.id).then( result => {
				console.log(result)
				if (result.length == 0) {
					TgController.newUser(msg.chat.id, msg).then( () => {						
						bot.sendMessage(msg.chat.id, welcomeMessage, {
							parse_mode : 'HTML',
							reply_markup: {
								inline_keyboard: array_mainmenu,
								remove_keyboard: true
							}
						})
					})
				} else {
					bot.sendMessage(msg.chat.id, welcomeMessage, {
						parse_mode : 'HTML',
						reply_markup: {
							inline_keyboard: array_mainmenu,
							remove_keyboard: true
						}
					})
				}
			})
			sessTg[msg.chat.id]['zakazStep'] = {}
			sessTg[msg.chat.id]['zakazData'] = {}
			sessTg[msg.chat.id]['language'] = 'ru'

		}

		if(sessTg[msg.chat.id].zakazStep == 'settingimya'){			

			updateData(msg.chat.id, msg.text, 'fio').then( res => {
				bot.sendMessage(msg.chat.id, res.text).then(() => {
					bot.sendMessage(msg.chat.id, '–í–∞—à–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
						parse_mode : 'HTML',
						reply_markup: {
							inline_keyboard: buttonGen(settFields, settTips, 'setting'),
							remove_keyboard: true
						}
					})
				})
			})
		}

		if(sessTg[msg.chat.id].zakazStep == 'settingregion'){

			updateData(msg.chat.id, msg.text, 'city').then( res => {
				bot.sendMessage(msg.chat.id, res.text).then(() => {
					bot.sendMessage(msg.chat.id, '–í–∞—à–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
						parse_mode : 'HTML',
						reply_markup: {
							inline_keyboard: buttonGen(settFields, settTips, 'setting'),
							remove_keyboard: true
						}
					})
				})
			})
		}

		if(sessTg[msg.chat.id].zakazStep == 'feedback'){

			TgController.newFeedback(msg.chat.id, msg.text).then(() => {
				bot.sendMessage(msg.chat.id, '–û—Ç–∑—ã–≤ —Å–æ–∑–¥–∞–Ω').then(() => {
					bot.sendMessage(msg.chat.id, welcomeMessage, {
						parse_mode : 'HTML',
						reply_markup: {
							inline_keyboard: buttonGen(settFields, settTips, 'setting'),
							remove_keyboard: true
						}
					})
				})
			})
		}

	}

})

// let mtext = '<b>–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –≥—Ä—É–∑–µ</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –Ω–∏–∂–µ\n–ñ–∏—Ä–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\nüëá\n'

bot.on('callback_query', async query => {
	// console.log(query)
	const { message: {chat/*, message_id, text */}} = query
	let qcallback = query.data.split('_')
	let sitelist = []
	//let regionlist = []

	if(!sessTg.hasOwnProperty(chat.id)){
		sessTg[chat.id] = {
			id: chat.id
		}
	}
	sessTg[chat.id]['zakazStep'] = qcallback[0]
	
	if(!sessTg[chat.id].hasOwnProperty('zakazData')){
		sessTg[chat.id]['zakazData'] = {}
	}
	let queryMess = qcallback[0]
	switch (queryMess) {
	case 'lang':

		updateData(chat.id, qcallback[1], 'language').then( () => {
			
			sessTg[chat.id]['language'] = qcallback[1]
			bot.sendMessage(chat.id, library.startMessage[qcallback[1]], {
				parse_mode : 'HTML',
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: library.startButton[qcallback[1]],
								callback_data: 'startButton'
							}
						],
						[
							{
								text: library.cooperation[qcallback[1]],
								callback_data: 'cooperation'
							}
						],
						[
							{
								text: library.mydata[qcallback[1]],
								callback_data: 'mydata'
							}
						]
					],
					remove_keyboard: true
				}
			})
		
		})

		bot.answerCallbackQuery({ callback_query_id: query.id})

		break
	case 'startButton':
		bot.sendPhoto(chat.id,__dirname+'/pics/i.jfif',{
			disable_web_page_preview: true,
			caption: 'üì£ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!',
			reply_markup: {				
				inline_keyboard: [
					[
						{
							text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
							url: 'https://t.me/joinchat/AAAAAD7nPclimW9nHkifZw'
						}
					],
					[
						{
							text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è 2',
							url: 'https://t.me/joinchat/AAAAAE3Wso_nrStU6dYaOw'
						}
					]
				]
			}
		})
		bot.answerCallbackQuery({ callback_query_id: query.id})
		break
	case 'cooperation':
		bot.sendMessage(chat.id, 'cooperation')
		bot.answerCallbackQuery({ callback_query_id: query.id})
		break
	case 'mydata':
		bot.sendMessage(chat.id, 'mydata')
		bot.answerCallbackQuery({ callback_query_id: query.id})
		break
	case 'sozdatzakaz':
		checkZakaz(chat.id, query.id, sessTg).then( restext => {
			if (restext.check) {
				console.log('newOrder', sessTg[chat.id]['zakazData'])
				TgController.newOrder(chat.id, sessTg[chat.id]['zakazData']).then((res) => {
					bot.sendMessage(70061654, '‚úÖ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å #'+res.dataValues.order_id+': '+sessTg[chat.id]['zakazData'].tovarimya+'\n –æ—Ç '+res.dataValues.fio_vrach)
					bot.sendMessage(153022142, '‚úÖ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å #'+res.dataValues.order_id+': '+sessTg[chat.id]['zakazData'].tovarimya+'\n –æ—Ç '+res.dataValues.fio_vrach)
					// bot.sendMessage(239764523, '‚úÖ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å #'+res)
					bot.sendMessage(chat.id, welcomeMessage, {
						parse_mode : 'HTML',
						reply_markup: {
							inline_keyboard: array_mainmenu_approved,
							remove_keyboard: true
						}
					})
					sessTg[chat.id]['zakazStep'] = {}
					sessTg[chat.id]['zakazData'] = {}

					bot.answerCallbackQuery({
						callback_query_id: query.id,
						text: restext.text
					})
				})
			} else {
				bot.answerCallbackQuery({
					callback_query_id: query.id,
					text: restext.text,
					show_alert: true
				})
			}
		})
		break
	case 'instruction':
		bot.answerCallbackQuery({
			callback_query_id: query.id,
			text: '–°–∫–æ—Ä–æ',
			show_alert: true
		})
		break
	case 'main':
		TgController.checkUser(chat.id).then( result => {
			if (result.length == 0) {
				bot.sendMessage(chat.id, welcomeMessage, {
					parse_mode : 'HTML',
					reply_markup: {
						inline_keyboard: array_mainmenu,
						remove_keyboard: true
					}
				})
			} else {
				bot.sendMessage(chat.id, welcomeMessage, {
					parse_mode : 'HTML',
					reply_markup: {
						inline_keyboard: array_mainmenu_approved,
						remove_keyboard: true
					}
				})
			}
		})
		bot.answerCallbackQuery({ callback_query_id: query.id})
		break
	case 'zakaz': {

		zakazMessage(chat.id, sessTg).then( text => {
			bot.sendMessage(chat.id, text, {
				parse_mode : 'HTML',
				reply_markup: {
					inline_keyboard: zakazMenu,
					remove_keyboard: true
				}
			})
		})
		bot.answerCallbackQuery({ callback_query_id: query.id})		
		break
	}
	case 'tovarname':
	case 'tovarotkuda':
	case 'tovarkuda':
	case 'tovarobyom':
	case 'tovarves':
	case 'tovarimya':
		bot.sendMessage(chat.id, formFields[queryMess]['inputMess'], {
			parse_mode : 'HTML',
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: '‚óÄ –ù–∞–∑–∞–¥',
							callback_data: 'zakaz'
						}
					]
				],
				remove_keyboard: true
			}
		})
		bot.answerCallbackQuery({ callback_query_id: query.id})
		break
	case 'registration':{
		bot.sendMessage(chat.id, '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É\n<b>üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä</b>', {
			parse_mode : 'HTML',
			reply_markup: {
				one_time_keyboard: true,
				resize_keyboard: true,
				keyboard: [[{
					text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä',
					request_contact: true
				}]]
			}
		})

		bot.answerCallbackQuery({ callback_query_id: query.id})
		break
	}
	case 'tovarmobil':{
		bot.sendMessage(chat.id, formFields[queryMess]['inputMess'], {
			parse_mode : 'HTML',
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: '‚óÄ –ù–∞–∑–∞–¥',
							callback_data: 'zakaz'
						}
					]
				],
				remove_keyboard: true
			}
		})
		let option = {
			parse_mode: 'HTML',
			reply_markup: {
				one_time_keyboard: true,
				resize_keyboard: true,
				keyboard: [[{
					text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä',
					request_contact: true
				}]]
			}
		}
		bot.sendMessage(chat.id, '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä –¢–µ–ª–µ–≥—Ä–∞–º–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É\n<b>üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä</b>', option)

		bot.answerCallbackQuery({ callback_query_id: query.id})
		break
	}
	case 'tovartip': {
		for (let index in tipGruza) {
			let subsitelist = []
			subsitelist.push({text: tipGruza[index],callback_data: 'forsave_tovartip_' + index })
			sitelist.push(subsitelist)
		}
		sitelist.push( [{text: '‚óÄ –ù–∞–∑–∞–¥',callback_data: 'zakaz'}])

		bot.sendMessage(chat.id, formFields[queryMess]['inputMess'], {
			parse_mode : 'HTML',
			reply_markup: {
				inline_keyboard: sitelist,
				remove_keyboard: true
			}
		})
		bot.answerCallbackQuery({ callback_query_id: query.id})
		break
	}
	case 'forsave': {
		
		sessTg[chat.id]['zakazData'][qcallback[1]] = qcallback[2]

		zakazMessage(chat.id, sessTg).then( text => {
			bot.sendMessage(chat.id, text, {
				parse_mode : 'HTML',
				reply_markup: {
					inline_keyboard: zakazMenu,
					remove_keyboard: true
				}
			})
		})

		bot.answerCallbackQuery({ callback_query_id: query.id})
		break
	}
	case 'settings': {

		bot.sendMessage(chat.id, '–í–∞—à–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
			parse_mode : 'HTML',
			reply_markup: {
				inline_keyboard: buttonGen(settFields, settTips, 'setting'),
				remove_keyboard: true
			}
		})
		bot.answerCallbackQuery({ callback_query_id: query.id})		
		break
	}
	case 'settingimya':
	case 'settingregion':
		bot.sendMessage(chat.id, settFields[queryMess]['inputMess'], {
			parse_mode : 'HTML',
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: '‚óÄ –ù–∞–∑–∞–¥',
							callback_data: 'settings'
						}
					]
				],
				remove_keyboard: true
			}
		})
		bot.answerCallbackQuery({ callback_query_id: query.id})
		break
	case 'feedback':
		bot.sendMessage(chat.id, '<b>–í–≤–µ–¥–∏—Ç–µ –í–∞—à –æ—Ç–∑—ã–≤:</b>\nüëá', {
			parse_mode : 'HTML',
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: '‚óÄ –ù–∞–∑–∞–¥',
							callback_data: 'settings'
						}
					]
				],
				remove_keyboard: true
			}
		})
		bot.answerCallbackQuery({ callback_query_id: query.id})
		break
	default:
		break
	}
	console.log(sessTg)
})

bot.on('text', msg =>{
	for (let index in zakaztips) {
		if(sessTg[msg.chat.id].zakazStep == zakaztips[index]){
			sessTg[msg.chat.id]['zakazData'][zakaztips[index]] = msg.text
			
			if (zakaztips.length==1) {				

				TgController.newOrder(msg.chat.id, { tovarimya: msg.text } ).then((res) => {
					console.log('res3',)
					//bot.sendMessage(239764523, '–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ')
					bot.sendMessage(70061654, '‚úÖ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å #'+res.dataValues.order_id+': '+msg.text+'\n –æ—Ç '+res.dataValues.fio_vrach)
					bot.sendMessage(153022142, '‚úÖ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å #'+res.dataValues.order_id+': '+msg.text+'\n –æ—Ç '+res.dataValues.fio_vrach)
					bot.sendMessage(msg.chat.id, '–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç ‚úÖ', {
						parse_mode : 'HTML',
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: '‚óÄ –ù–∞–∑–∞–¥',
										callback_data: 'main'
									}
								]
							],
							remove_keyboard: true
						}
					}).then(() => {
						sessTg[msg.chat.id]['zakazStep'] = {}
						sessTg[msg.chat.id]['zakazData'] = {}
					})
				})

			} else {
				zakazMessage(msg.chat.id, sessTg).then( text => {
					bot.sendMessage(msg.chat.id, text, {
						parse_mode : 'HTML',
						reply_markup: {
							inline_keyboard: zakazMenu,
							remove_keyboard: true
						}
					})
				})	
			}			
		}
	}
	console.log(sessTg)
})

bot.on('contact', msg =>{
	
	if(sessTg[msg.chat.id].zakazStep == 'tovarmobil'){
		sessTg[msg.chat.id]['zakazData'].tovarmobil = msg.contact.phone_number

		zakazMessage(msg.chat.id, sessTg).then( text => {
			bot.sendMessage(msg.chat.id, text, {
				parse_mode : 'HTML',
				reply_markup: {
					inline_keyboard: zakazMenu,
					remove_keyboard: true
				}
			})
		})
	}
	
	if(sessTg[msg.chat.id].zakazStep == 'registration'){

		TgController.newUser(msg.chat.id, msg).then(function(res) {
			if (res[1]) {
				TgController.checkUser(msg.chat.id).then( result => {
					bot.sendMessage(msg.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞').then(() => {
						if (result.length == 0) {
							bot.sendMessage(msg.chat.id, welcomeMessage, {
								parse_mode : 'HTML',
								reply_markup: {
									inline_keyboard: array_mainmenu,
									remove_keyboard: true
								}
							})
						} else {
							bot.sendMessage(msg.chat.id, welcomeMessage, {
								parse_mode : 'HTML',
								reply_markup: {
									inline_keyboard: array_mainmenu_approved,
									remove_keyboard: true
								}
							})
						}
					})
				})
			} else {
				TgController.checkUser(msg.chat.id).then( result => {
					bot.sendMessage(msg.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã').then(() => {
						if (result.length == 0) {
							bot.sendMessage(msg.chat.id, welcomeMessage, {
								parse_mode : 'HTML',
								reply_markup: {
									inline_keyboard: array_mainmenu,
									remove_keyboard: true
								}
							})
						} else {
							bot.sendMessage(msg.chat.id, welcomeMessage, {
								parse_mode : 'HTML',
								reply_markup: {
									inline_keyboard: array_mainmenu_approved,
									remove_keyboard: true
								}
							})
						}		
					})
				})
			}
		})		
	}
	
	console.log(sessTg)
})